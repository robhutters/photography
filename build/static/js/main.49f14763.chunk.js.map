{"version":3,"sources":["components/Slides.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["AutoplaySlider","withAutoplay","AwesomeSlider","Slides","props","images","data","map","image","data-src","source","key","play","cancelOnInteraction","interval","bullets","cssModule","AwesomeSliderStyles","mobileTouch","fillParent","transitionDelay","Slider","state","fetch","then","res","json","setState","catch","e","console","log","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","this","window","outerHeight","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"gUAMMA,EAAiBC,IAAaC,KAwBrBC,EApBA,SAACC,GACd,IAAMC,EAASD,EAAME,KAAKC,KAAI,SAAAC,GAAK,OAAI,yBAAKC,WAAUD,EAAME,OAAQC,IAAI,iBAGxE,OAAQ,kBAACX,EAAD,CACNY,MAAM,EACNC,qBAAqB,EACrBC,SAAU,IACVC,SAAS,EAETC,UAAWC,IACXC,aAAa,EACbC,YAAY,EACZC,gBAAiB,KAGhBf,I,gBC0CUgB,G,wDA3Db,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAEDkB,MAAQ,CACXhB,KAAM,MAJS,E,gEAUE,IAAD,OAElBiB,MAAM,qCACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAClB,GAAD,OAAU,EAAKqB,SAAS,CAACrB,YAC9BsB,OAAM,SAACC,GAAD,OAAOC,QAAQC,IAAIF,MAE1BG,QAAMC,gBAAgB,CACpBC,MAAO,WACPC,QAAQ,sDACRC,KAAM,UACNC,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACPC,SAAU,IACVC,UAAU,O,+BASd,IAAMrC,EAAOsC,KAAKtB,MAAMhB,KAAOsC,KAAKtB,MAAMhB,KAAO,KACjD,OAAa,OAATA,EACEuC,OAAOC,YAAc,IACf,iHAKR,6BAEE,kBAAC,EAAD,CAAQxC,KAAMA,KAOV,sD,GAvDOyC,cCQNC,MATf,WACE,OACE,yBAAKC,UAAU,OACf,kBAAC,IAAD,MACA,kBAAC,EAAD,QCEgBC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLlC,QAAQkC,MAAMA,EAAM7B,c","file":"static/js/main.49f14763.chunk.js","sourcesContent":["import React from 'react';\nimport AwesomeSlider from 'react-awesome-slider';\nimport withAutoplay from 'react-awesome-slider/dist/autoplay';\nimport AwesomeSliderStyles from 'react-awesome-slider/dist/styles.css';\n\n\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\n\n\n\nconst Slides = (props) => {\n  const images = props.data.map(image => <div data-src={image.source} key=\"image.key\" />)\n  \n\n  return (<AutoplaySlider  \n    play={false}\n    cancelOnInteraction={true}\n    interval={6000}\n    bullets={false}\n\n    cssModule={AwesomeSliderStyles}\n    mobileTouch={true}\n    fillParent={true}\n    transitionDelay={200}\n    >\n   \n    {images}\n  </AutoplaySlider>)\n}\n\nexport default Slides;","import React, {Component} from 'react';\nimport Slides from './Slides'\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css'\n\n\n\nclass Slider extends Component {\n  \n  constructor(props) {\n    super(props);\n \n    this.state = {\n      data: null,\n    };\n\n  }\n\n\n  componentDidMount() {\n    \n    fetch(\"http://localhost:3000/images.json\")\n    .then((res) => res.json())\n    .then((data) => this.setState({data}))\n    .catch((e) => console.log(e))\n\n    store.addNotification({\n      title: \"Welcome!\",\n      message: `Best viewed in full-screen mode! CTRL+CMD/WINDOWS+F`,\n      type: \"success\",\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: {\n        duration: 4000,\n        onScreen: true\n      }\n    })\n    \n   \n  }\n\n\n  render() { \n    const data = this.state.data ? this.state.data : null\n    if (data !== null) {\n      if (window.outerHeight < 600) {\n        return (<div>Your screen is too small to properly view the photographs. Please use a desktop.</div>)\n      }\n      \n      return ( \n  \n        <div>\n        \n          <Slides data={data} />\n         \n        </div>\n     \n      )\n    } else {\n      \n      return (<div>Loading items ...</div>)\n    }\n     \n  }\n}\n \nexport default Slider;\n\n\n","import React from 'react';\nimport './App.css';\nimport Slider from './components/Slider'\nimport ReactNotification from 'react-notifications-component'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <ReactNotification />\n    <Slider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}